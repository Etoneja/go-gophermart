// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go

// Package service is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/etoneja/go-gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// CreateOrGetOrder mocks base method.
func (m *MockServicer) CreateOrGetOrder(ctx context.Context, order *models.OrderModel) (*models.OrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrGetOrder", ctx, order)
	ret0, _ := ret[0].(*models.OrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrGetOrder indicates an expected call of CreateOrGetOrder.
func (mr *MockServicerMockRecorder) CreateOrGetOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrGetOrder", reflect.TypeOf((*MockServicer)(nil).CreateOrGetOrder), ctx, order)
}

// CreateWithdraw mocks base method.
func (m *MockServicer) CreateWithdraw(ctx context.Context, withdraw *models.WithdrawModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", ctx, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockServicerMockRecorder) CreateWithdraw(ctx, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockServicer)(nil).CreateWithdraw), ctx, withdraw)
}

// GetOrder mocks base method.
func (m *MockServicer) GetOrder(ctx context.Context, orderID string) (*models.OrderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(*models.OrderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockServicerMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockServicer)(nil).GetOrder), ctx, orderID)
}

// GetOrdersForUser mocks base method.
func (m *MockServicer) GetOrdersForUser(ctx context.Context, user *models.UserModel) (models.OrderModelList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForUser", ctx, user)
	ret0, _ := ret[0].(models.OrderModelList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForUser indicates an expected call of GetOrdersForUser.
func (mr *MockServicerMockRecorder) GetOrdersForUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForUser", reflect.TypeOf((*MockServicer)(nil).GetOrdersForUser), ctx, user)
}

// GetOrdersToSync mocks base method.
func (m *MockServicer) GetOrdersToSync(ctx context.Context, limit int) (models.OrderModelList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersToSync", ctx, limit)
	ret0, _ := ret[0].(models.OrderModelList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersToSync indicates an expected call of GetOrdersToSync.
func (mr *MockServicerMockRecorder) GetOrdersToSync(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersToSync", reflect.TypeOf((*MockServicer)(nil).GetOrdersToSync), ctx, limit)
}

// GetUserBalance mocks base method.
func (m *MockServicer) GetUserBalance(ctx context.Context, userID string) (*models.BalanceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, userID)
	ret0, _ := ret[0].(*models.BalanceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockServicerMockRecorder) GetUserBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockServicer)(nil).GetUserBalance), ctx, userID)
}

// GetUserByLogin mocks base method.
func (m *MockServicer) GetUserByLogin(ctx context.Context, login string) (*models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockServicerMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockServicer)(nil).GetUserByLogin), ctx, login)
}

// GetUserWithdrawals mocks base method.
func (m *MockServicer) GetUserWithdrawals(ctx context.Context, userID string) (models.WithdrawModelList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].(models.WithdrawModelList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockServicerMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockServicer)(nil).GetUserWithdrawals), ctx, userID)
}

// IsAccrualSytemBusy mocks base method.
func (m *MockServicer) IsAccrualSytemBusy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccrualSytemBusy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAccrualSytemBusy indicates an expected call of IsAccrualSytemBusy.
func (mr *MockServicerMockRecorder) IsAccrualSytemBusy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccrualSytemBusy", reflect.TypeOf((*MockServicer)(nil).IsAccrualSytemBusy))
}

// LoginUser mocks base method.
func (m *MockServicer) LoginUser(ctx context.Context, login, password string) (*models.UserModel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, login, password)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServicerMockRecorder) LoginUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockServicer)(nil).LoginUser), ctx, login, password)
}

// RegisterUser mocks base method.
func (m *MockServicer) RegisterUser(ctx context.Context, login, password string) (*models.UserModel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, password)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServicerMockRecorder) RegisterUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockServicer)(nil).RegisterUser), ctx, login, password)
}

// SyncOrder mocks base method.
func (m *MockServicer) SyncOrder(ctx context.Context, orderID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncOrder", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncOrder indicates an expected call of SyncOrder.
func (mr *MockServicerMockRecorder) SyncOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncOrder", reflect.TypeOf((*MockServicer)(nil).SyncOrder), ctx, orderID)
}

// ValidateToken mocks base method.
func (m *MockServicer) ValidateToken(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockServicerMockRecorder) ValidateToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockServicer)(nil).ValidateToken), tokenString)
}
